<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HBlog</title>
  
  <subtitle>Haotian</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haotianmcihael.github.io/"/>
  <updated>2018-10-03T07:39:03.486Z</updated>
  <id>http://haotianmcihael.github.io/</id>
  
  <author>
    <name>haotianmichael</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>汇编语言（王爽）ch1</title>
    <link href="http://haotianmcihael.github.io/2018/10/02/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%88%E7%8E%8B%E7%88%BD%EF%BC%89ch1/"/>
    <id>http://haotianmcihael.github.io/2018/10/02/汇编语言（王爽）ch1/</id>
    <published>2018-10-02T09:03:13.000Z</published>
    <updated>2018-10-03T07:39:03.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验1-查看CPU和内存，用机器指令和汇编指令编程"><a href="#实验1-查看CPU和内存，用机器指令和汇编指令编程" class="headerlink" title="实验1: 查看CPU和内存，用机器指令和汇编指令编程"></a>实验1: 查看CPU和内存，用机器指令和汇编指令编程</h2><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><h4 id="硬件基础"><a href="#硬件基础" class="headerlink" title="硬件基础"></a>硬件基础</h4><blockquote><p>   全书的核心在使用汇编语言进行编程，老师在第一章就抽象出了完整的编程模型供汇编程序员参考————<code>冯诺依曼结构</code>。<br>   CPU只是一个运算单元，只有提供了数据和指令才可以正常运行，而数据和指令存储在内存中。那CPU和内存如何进行交互？<br><a id="more"></a>  </p></blockquote><ul><li>存储单元的地址（地址）</li><li>读/写操作（控制）</li><li>读/写的具体数据（数据）  </li></ul><blockquote><p> 答案是总线，地址总线决定了CPU的寻址能力；数据总线决定了CPU一次能够处理多少数据；控制总线决定了CPU对外部器件的控制能力。这里的外部器件指的是除内存外的其他存储单元比如VGA等。所以在模型内部实际上还有一层抽象————那就是由系统中所有的存储单元组成的统一的逻辑存储器。实际上CPU面向的就是这个逻辑存储器，书中叫它<code>内存地址空间</code>。  </p></blockquote><blockquote><p> 以上就是整个书中抽象出来最简单的编程模型，王爽老师在一开始就定下这本书的基调————不是讲CPU和外设的物理结构<code>《微机原理和接口》</code>，也不是讲整个计算机系统的结构和功能<code>《组成原理》</code>。学习汇编语言是利用固有的硬件体系和特有的指令集进行编程从而对硬件系统进行控制。<br> 固有的硬件体系指的是这套<code>CPU+RAM</code>的计算机模型是图灵，冯诺依曼这些先驱们总结出来的一套最适合的结构。而特有的指令集则是说<strong>不同的CPU有不同的汇编语言</strong>，用x86的汇编语言的原因主要是因为这套指令集只有14个寄存器和1MB(20位地址总线)寻址空间，比较容易掌握。</p></blockquote><h4 id="指令和数据"><a href="#指令和数据" class="headerlink" title="指令和数据"></a>指令和数据</h4><blockquote><p>学习组成的时候就对这两个概念很模糊，但是做实验的过程中其实发现：其实CPU看到的东西就是一堆01而已，真正将这堆01赋予意义的还是我们。换句话说就是数据和指令只是一个应用上的概念，你将它放到PC中它就是地址，而将它放到另外一个寄存器中它可能就直接被用来运算了。<br>从原理上看，主要是不同的寄存器对这些数据赋予了不同的功能。CPU的工作用一句话来概括就是<code>从特定的寄存器中取出data1作为地址，然后把内存中这个地址相对应的data2作为指令进行计算</code>。但是如果我把<code>data1</code>和<code>data2</code>互换一下，其实也是可以的。但是需要考虑到的是<code>data2</code>所代表的地址是不是在内存地址空间的范围之内，我的理解是寄存器，总线，内存中存储数据的位数有可能都是不一样的。但是说到底它们只是来存储数据的，写错最坏的情况也就是CPU跑崩了。</p></blockquote><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><blockquote><p>   8086CPU有14个寄存器，都是16位的。但是这16位的寄存器也可以独立作为两个8位的寄存器使用。<br>   寄存器和内存是汇编程序猿眼中最直观的计算机样子。</p></blockquote><h5 id="汇编层面的CPU"><a href="#汇编层面的CPU" class="headerlink" title="汇编层面的CPU"></a>汇编层面的CPU</h5><ul><li>运算器进行信息处理</li><li>寄存器进行信息存储</li><li>控制器控制各种器件进行工作</li><li>内部总线连接各种器件，在它们之间进行数据的传送  </li></ul><h5 id="8086架构（16位机）"><a href="#8086架构（16位机）" class="headerlink" title="8086架构（16位机）"></a>8086架构（16位机）</h5><p>具体深究到物理实现就是《组成原理》知识了。  </p><ul><li><ol><li>运算器一次最多可以处理16位数据  </li></ol></li><li><ol start="2"><li>寄存器的最大宽度为16位      </li></ol></li><li><ol start="3"><li>寄存器和运算器之间的通路为16位  </li></ol></li></ul><h5 id="汇编层面的内存"><a href="#汇编层面的内存" class="headerlink" title="汇编层面的内存"></a>汇编层面的内存</h5><blockquote><p>PU在访问内存单元的时候，需要知道内存单元的地址。所有的内存单元构成的存储空间是一个一维的线性空间，每一个内存空间在这个空间上都有唯一的地址，这个惟一的地址就叫做<code>物理地址</code>。<br>CPU首先在内部形成这个物理地址，然后通过地址总线送入存储器。这个地址一定是一个内存单元的物理地址。不同的CPU架构形成地址的方式不一样。  </p></blockquote><h5 id="CS-IP"><a href="#CS-IP" class="headerlink" title="CS:IP"></a>CS:IP</h5><blockquote><p>   前面提到了8086CPU内部需要形成物理地址，但是8086是16位机————只能处理和传输16位的地址，但是8086的地址总线有20位，所以需要两个16位来共同形成一个20位的地址。<br>    14个寄存器中，CS是段寄存器，存放基地址。而IP存放偏移量。公式:<code>CSx16+IP</code>。<br>  首先需要明白的就是，一个内存单元是8位二进制也叫一个字节。而十六进制的一位可以表示成为二进制的4位。完全只是为了方便才写成16进制的。<strong>20位的地址（5位16进制）</strong>可以写成<code>4C780H</code>，后面的H表示16进制。<code>一个X进制的数据左移一位，相当于乘以X</code>。所以为了记起来方便一些可以记成<code>CS寄存器的数据左移一位+IP寄存器的值</code>。但是<strong>两个寄存器只有16位（4位16进制)</strong>，到后面计算的时候需要注意这两个前提，避免溢出。<br>  书中特别强调了对<strong>段</strong>的理解。这里的段并不是指内存被物理上分成一段一段的。而是因为CPU在管理内存的时候，使用<code>CSx16+IP</code>的方式来进行管理。<strong>所以可以将地址连续，起始地址位16的倍数的一组内存单元看成是一个段。</strong>重点在于不是所有的起始地址都可以作为段地址————这是因为<code>CSx16</code>决定的。而且因为<code>IP</code>是16位的所以每一个段的长度最大为<code>64KB</code>。  </p></blockquote><h5 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h5><blockquote><p>   <strong>在8086机中，任意时刻CPU将CS:IP指向的内容当做指令执行.</strong>汇编中使用<code>jmp 段地址:偏移地址</code>对CS:IP进行修改。或者使用<code>jmp 寄存器</code>来修改IP的指。<br>    8086的工作过程。</p><ul><li>从CS:IP指向的内存单元中读取指令，读取的指令进入指令缓存器。</li><li>IP只想下一条指令。</li><li>执行指令,从CS:IP中取指令，重复上面的过程。  </li></ul></blockquote><h4 id="划线部分"><a href="#划线部分" class="headerlink" title="划线部分"></a>划线部分</h4><ul><li>汇编语言和机器语言的差别在于指令的表示方法上。</li><li>微机存储器的容量是以<strong>字节</strong>为最小单位的来计算的。</li><li>在内存和磁盘上，数据和指令没有任何区别。</li><li>在汇编语言这门课中，我们所面对的是<strong>内存地址空间</strong>。CPU向这段地址中读写数据实际上就是向相应的物理存储器中读写数据。</li><li>内存地址空间的大小收到CPU地址总线宽度的限制。</li></ul><h3 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h3><p>debug是DOS提供的实模式（8086方式）程序的调试工具。使用它可以查看CPU的各种寄存器中的内容，内存的情况和在机器码级跟踪程序的运行。<br>这里不得不佩服这个仿真器的强大，尽然可以在Mac下支持快捷键比如使用Alt+Enter键可以全屏，不过显存有点小所以分辨率不高……</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实验1-查看CPU和内存，用机器指令和汇编指令编程&quot;&gt;&lt;a href=&quot;#实验1-查看CPU和内存，用机器指令和汇编指令编程&quot; class=&quot;headerlink&quot; title=&quot;实验1: 查看CPU和内存，用机器指令和汇编指令编程&quot;&gt;&lt;/a&gt;实验1: 查看CPU和内存，用机器指令和汇编指令编程&lt;/h2&gt;&lt;h3 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h3&gt;&lt;h4 id=&quot;硬件基础&quot;&gt;&lt;a href=&quot;#硬件基础&quot; class=&quot;headerlink&quot; title=&quot;硬件基础&quot;&gt;&lt;/a&gt;硬件基础&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;   全书的核心在使用汇编语言进行编程，老师在第一章就抽象出了完整的编程模型供汇编程序员参考————&lt;code&gt;冯诺依曼结构&lt;/code&gt;。&lt;br&gt;   CPU只是一个运算单元，只有提供了数据和指令才可以正常运行，而数据和指令存储在内存中。那CPU和内存如何进行交互？&lt;br&gt;
    
    </summary>
    
      <category term="Assembly" scheme="http://haotianmcihael.github.io/categories/Assembly/"/>
    
    
      <category term="i386" scheme="http://haotianmcihael.github.io/tags/i386/"/>
    
      <category term="Assembly" scheme="http://haotianmcihael.github.io/tags/Assembly/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言（王爽）ch0</title>
    <link href="http://haotianmcihael.github.io/2018/10/02/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%88%E7%8E%8B%E7%88%BD%EF%BC%89ch0/"/>
    <id>http://haotianmcihael.github.io/2018/10/02/汇编语言（王爽）ch0/</id>
    <published>2018-10-02T08:25:22.000Z</published>
    <updated>2018-10-03T04:38:37.596Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><blockquote><p>王爽老师的《汇编语言》是国内的经典教材。<br>学习汇编的目的在于:充分获得底层编程的体验和深刻理解机器运行程序的机理。所以经典的做法往往不是只针对于某一种指令集，而是以一种指令集为手段来深入理解机器工作的原理，体会一个没有操作系统的编程开发环境。正如书中:编程的平台是硬件而不是操作系统。或许这也是汇编语言真正的价值所在吧。</p></blockquote><a id="more"></a>    <h4 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h4><blockquote><p>全书的实验都是在8086CPU的体系结构下展开的，这也是Intel第一块16的处理器。<br>我们有两种办法在自己的计算机上进行模拟8086:一种是使用虚拟机WindowsXP系统。一种是采用DOSBox模拟器，第二种比较方便。<a href="https://pan.baidu.com/s/1-Da6IPYym54QbokzFMiNvA" target="_blank" rel="noopener">这里是链接</a>。<br>本书有17个实验，2个课程设计，5个研究试验。我主要是以这些实验为章节展开学习。</p></blockquote><h4 id="搭建实验条件"><a href="#搭建实验条件" class="headerlink" title="搭建实验条件"></a>搭建实验条件</h4><ul><li>将下载好的环境包放在<code>~/x86</code>，作为我们的工作目录。</li><li>打开DOSBox模拟器。</li><li>挂载C盘:<code>mount C ~/x86</code>。</li><li>进入C盘:<code>C:</code>。</li><li>开始实验:<code>debug</code>。</li><li>退出程序<code>quit</code>，退出模拟器<code>exit</code>。</li></ul><h4 id="安装成功展示"><a href="#安装成功展示" class="headerlink" title="安装成功展示"></a>安装成功展示</h4><p><img src="https://raw.githubusercontent.com/haotianmichael/markdownPhotos/master/i386/1.png" width="300" height="200" alt="图片名称" align="center"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;王爽老师的《汇编语言》是国内的经典教材。&lt;br&gt;学习汇编的目的在于:充分获得底层编程的体验和深刻理解机器运行程序的机理。所以经典的做法往往不是只针对于某一种指令集，而是以一种指令集为手段来深入理解机器工作的原理，体会一个没有操作系统的编程开发环境。正如书中:编程的平台是硬件而不是操作系统。或许这也是汇编语言真正的价值所在吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Assembly" scheme="http://haotianmcihael.github.io/categories/Assembly/"/>
    
    
      <category term="i386" scheme="http://haotianmcihael.github.io/tags/i386/"/>
    
      <category term="Assembly" scheme="http://haotianmcihael.github.io/tags/Assembly/"/>
    
  </entry>
  
</feed>
